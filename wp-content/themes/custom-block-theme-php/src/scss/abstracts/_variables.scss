/* 
This file contains SCSS variables sourced from the Bootstrap framework.
Source: https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss
The code used in accordance with Bootstrap's open-source license (MIT).
Modifications may have been made to the original code.
*/
@use 'sass:map';
@use 'sass:string';
@use 'sass:list';
@use 'sass:math';

/* ****************************************************** */
/* General setting
/* ****************************************************** */

$prefix: '';
$prefix-class: $prefix;
$enable-transitions: true;
$enable-reduced-motion: true;
$enable-css-grid-system: true;

/* ****************************************************** */
/* Bootstrap grid system  & container 
/* ****************************************************** */

$bs-prefix: bs-;
$enable-bootstrap-grid-system: true;
$enable-gutters: false;
$grid-columns: 12;
$grid-gutter-width: 24px;
$grid-row-columns: 6;

$enable-container-classes: true;
$enable-max-container-classes: false;
$enable-max-container-fluid-classes: false;
$container-padding: 12px;

/* ******************************************************* */
/* Breakpoints 
/* ******************************************************* */

// px values
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px,
  3xl: 1600px,
);

// rem values
// $grid-breakpoints: (
//   xs: 0,
//   sm: px-to-rem(576),
//   md: px-to-rem(768),
//   lg: px-to-rem(992),
//   xl: px-to-rem(1200),
//   xxl: px-to-rem(1400),
// );

/* ****************************************************** */
/* Container max-widths 
/* ****************************************************** */

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px,
  3xl: 1500px,
);

// @debug map.get($container-max-widths, sm);
// @debug map.get($container-max-widths, 3xl);
// @debug map.get($grid-breakpoints, 3xl);

/* ****************************************************** */
/* Color theme
/* ****************************************************** */

$color-prefix: clr-;
$hover-prefix: hover-;

$primary: #0d6efd;
$secondary: #6c757d;
$success: #198754;
$info: #0dcaf0;
$warning: #ffc107;
$danger: #dc3545;
$light: #f8f9fa;
$dark: #212529;

$color-theme: (
  default: (
    color: (
      'primary': $primary,
      'secondary': $secondary,
      'success': $success,
      'info': $info,
      'warning': $warning,
      'danger': $danger,
      'light': $light,
      'dark': $dark,
      'zero': #000,
      'one': #fff,
      'black': #000,
      'white': #fff,
    ),
    hover: (
      'primary': #012345,
      'secondary': $secondary,
      'success': $success,
      'info': $info,
      'warning': $warning,
      'danger': $danger,
      'light': $light,
      'dark': $dark,
      'zero': #000,
      'quindecenary': #fff,
    ),
  ),
);

$selected-theme: default;

$selected-theme-hex-colors: if(
  map.has-key($color-theme, $selected-theme, color),
  map.get($color-theme, $selected-theme, color),
  null
);

// pick which colors should have a rgb custom property
// $selected-theme-rgb: (
//   'primary': map.get($color-theme, $selected-theme, color, primary),
// );

$enable-rgb-colors: true;
$enable-color-themes: false;

/* ************************************************************* */
/* Clamp() values
/* ************************************************************* */

// $size-prefix: fs-fluid;

$size-clamp: (
  fs-fluid-heading-primary: (
    // default true
    create-custom-property: true,
    threshold: (
      sm: 32,
      1800: 80,
    ),
    // default rem
    threshold-unit: 'rem',
    // default rem
    preferred-unit: 'rem',
    // default viewport
    relative-to: 'viewport',
  ),
);

$spacing-clamp: (
  'fluid-15-30': (
    // default true
    create-custom-property: true,
    threshold: (
      576px: 32,
      1400px: 150,
    ),
    // default px
    threshold-unit: 'px',
    // default rem
    preferred-unit: 'rem',
    // default viewport
    relative-to: 'viewport',
  ),
);

/* ************************************************************* */
/* Simple custom properties
/* ************************************************************* */

$simple-custom-properties: (
  'container-padding-x': (
    value: $container-padding,
  ),
  'example-custom-property': (
    value: 32px,
    property: font-size,
    class: example-class,
  ),
);

/* ****************************************************** */
/* Responsive custom Properties - xs is default
/* ****************************************************** */

$responsive-custom-properties-prefix: '';

$responsive-custom-properties: (
  xs: (
    'heading-1': (
      value: 24px,
      property: font-size,
      class: res-heading-1,
    ),
  ),
  sm: (
    // 'heading-1': 34px,
    container: map.get($container-max-widths, sm),
  ),
  md: (
    container: map.get($container-max-widths, md),
  ),
  lg: (
    container: map.get($container-max-widths, lg),
  ),
  xl: (
    container: map.get($container-max-widths, xl),
  ),
  xxl: (
    container: map.get($container-max-widths, xxl),
  ),
  3xl: (
    container: map.get($container-max-widths, 3xl),
  ),
);

/* ****************************************************** */
/* Spacing
/* ****************************************************** */

$enable-negative-margins: true;

$factor: 4px;
$sizes-regular: ();

@for $i from 0 through 50 {
  $sizes-regular: map.merge(
    $sizes-regular,
    (
      $i: if($i == 0, $i, $factor * $i),
    )
  );
}

// Add additional regular sizes manually
$sizes-regular: map.merge(
  $sizes-regular,
  (
    100: 100 * $factor,
  )
);

$sizes-irregular: ();

@for $i from 1 through 200 {
  @if ($i % 4 != 0) {
    $sizes-irregular: map.merge($sizes-irregular, (i-#{$i}: $i * 1px));
  }
}

// Add additional irregular sizes manually
$sizes-irregular: map.merge(
  $sizes-irregular,
  (
    i-201: 201px,
  )
);

/* ****************************************************** */
/* Box shadows 
/* ****************************************************** */

$box-shadows: (
  custom-property-prefix: 'box-shadow',
  values: (
    focus: 0 0 0 0.25rem rgba(var(--clr-primary-rgb), 0.25),
    focus-inset: inset 0 0 0 0.25rem rgba(var(--clr-primary-rgb), 0.25),
    null: 0 0.5rem 1rem rgba(var(--clr-dark-rgb), 0.15),
    sm: 0 0.125rem 0.25rem rgba(var(--clr-dark-rgb), 0.075),
    lg: 0 1rem 3rem rgba(var(--clr-dark-rgb), 0.175),
    inset: inset 0 1px 2px rgba(var(--clr-dark-rgb), 0.075),
    none: none,
  ),
);

/* ****************************************************** */
/* Z-index 
/* ****************************************************** */

$z-indeces: (
  custom-property-prefix: 'z',
  values: (
    n1: -1,
    0: 0,
    1: 999,
    2: 998,
    3: 997,
    4: 996,
  ),
);

/* ****************************************************** */
/* Borders  
/* ****************************************************** */

$borders: (
  custom-property-prefix: 'border',
  values: (
    main: 1px solid var(--#{$prefix}clr-zero),
  ),
);

/* ****************************************************** */
/* Border radius 
/* ****************************************************** */

$border-radius: (
  custom-property-prefix: 'radius',
  values: (
    sm: 4px,
    base: 8px,
    lg: 12px,
  ),
);

/* ****************************************************** */
/* Transitions
/* ****************************************************** */

$transitions: (
  custom-property-prefix: 'transition',
  values: (
    focus: 0.15s ease-in-out,
    base: all 0.2s ease-in-out,
    fade: opacity 0.15s linear,
    collapse: height 0.35s ease,
    collapse-width: width 0.35s ease,
  ),
);

/* ****************************************************** */
/* Focus rings
/* ****************************************************** */

$focus-rings: (
  custom-property-prefix: 'focus-ring',
  values: (
    main: 0 0 0 0.25rem rgba(var(--clr-primary-rgb), 0.75),
  ),
);

/* ****************************************************** */
/* Font family
/* ****************************************************** */

$font-families: (
  custom-property-name: 'font-family',
  values: (
    main: (
      'Arial',
      sans-serif,
    ),
    sub: (
      'Liberation Mono',
      monospace,
    ),
  ),
);

/* ****************************************************** */
/* Maps
/* ****************************************************** */

$percentage-values: (
  0: 0,
  5: 5%,
  10: 10%,
  15: 15%,
  20: 20%,
  25: 25%,
  30: 30%,
  35: 35%,
  40: 40%,
  45: 45%,
  50: 50%,
  55: 55%,
  60: 60%,
  65: 65%,
  70: 70%,
  75: 75%,
  80: 80%,
  85: 85%,
  90: 90%,
  95: 95%,
  100: 100%,
);

$decimal-percentage-values: (
  0: 0,
  5: 0.05,
  10: 0.1,
  15: 0.15,
  20: 0.2,
  25: 0.25,
  30: 0.3,
  35: 0.35,
  40: 0.4,
  45: 0.45,
  50: 0.5,
  55: 0.55,
  60: 0.6,
  65: 0.65,
  70: 0.7,
  75: 0.75,
  80: 0.8,
  85: 0.85,
  90: 0.9,
  95: 0.95,
  100: 1,
  101: 1.01,
  102: 1.02,
  103: 1.03,
  104: 1.04,
  105: 1.05,
  110: 1.1,
  115: 1.15,
  120: 1.2,
  130: 1.3,
);

$viewport-height-values: (
  25: 25vh,
  50: 50vh,
  75: 75vh,
  100: 100vh,
);
$viewport-width-values: (
  25: 25vw,
  50: 50vw,
  75: 75vw,
  100: 100vw,
);

// for width, height, and positions top-right-bottom-left utility classes:
$fixed-values: (
  n100: -100px,
  n150: -150px,
  n200: -200px,
  n250: -250px,
  n300: -300px,
  n16: -16px,
  n24: -24px,
  n25: -25px,
  n50: -50px,
  n75: -75px,
  0: 0,
  16: 16px,
  24: 24px,
  25: 25px,
  50: 50px,
  75: 75px,
  100: 100px,
  150: 150px,
  200: 200px,
  250: 250px,
  300: 300px,
  350: 350px,
  400: 400px,
  450: 450px,
  500: 500px,
  550: 550px,
  600: 600px,
  650: 650px,
  700: 700px,
  750: 750px,
  800: 800px,
  850: 850px,
  900: 900px,
  950: 950px,
  1000: 1000px,
  1050: 1050px,
  1100: 1100px,
  1200: 1200px,
  1300: 1300px,
  1400: 1400px,
  1500: 1500px,
  1600: 1600px,
  1700: 1700px,
  1800: 1800px,
  1920: 1920px,
);

$border-widths: (
  0: 0px,
  1: 1px,
  2: 2px,
  3: 3px,
  4: 4px,
  5: 5px,
  6: 6px,
  7: 7px,
  8: 8px,
  9: 9px,
  10: 10px,
);
